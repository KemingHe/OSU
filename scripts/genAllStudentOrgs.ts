// ./scripts/genAllStudentOrgs.ts
//
// Generate student organization typescript array file.

// Zod essential imports.
import { type ZodSchema, z } from "zod";

// Local utils imports.
import csv2TS, {
  DEFAULT_HEADER,
  type csv2TSOptions,
} from "@scripts/utils/csv2TS";

export const rawStudentOrg: ZodSchema = z.object(
  // biome-ignore format: added alignment for clarity.
  {
    name            : z.string().min(1),
    purposeStatement: z.string(),
    affiliation     : z.string(),
  },
);
export type rawStudentOrg = z.infer<typeof rawStudentOrg>;

export const studentOrg: ZodSchema = z.object(
  // biome-ignore format: added alignment for clarity.
  {
    name            : z.string().min(1),
    purposeStatement: z.nullable(z.string().min(1)),
    affiliation     : z.nullable(z.array(z.string().min(1)).min(1)),
  },
);
export type studentOrg = z.infer<typeof studentOrg>;

// Sanitize affiliation string into array of strings, fallback to null.
export function sanitizeAffiliation(affiliation: string): string[] | null {
  // Early return null if affiliation is empty.
  if (affiliation === "") return null;

  // Sanitize each affiliation, keeping only non-empty strings.
  const rawAffiliations: string[] = affiliation.split(",");
  const sanitizedAffiliations: string[] = [];
  for (const rawAffilication of rawAffiliations) {
    const affiliation = rawAffilication.trim();
    if (affiliation !== "") {
      sanitizedAffiliations.push(affiliation);
    }
  }

  // Return null for edge case of no valid affiliations.
  if (sanitizedAffiliations.length === 0) return null;

  return sanitizedAffiliations;
}

export function sanitizeStudentOrgs(data: rawStudentOrg[]): studentOrg[] {
  return data.map((dataPoint) => {
    const purposeStatement = dataPoint.purposeStatement;
    const affiliation = dataPoint.affiliation;
    return {
      ...dataPoint,
      purposeStatement: purposeStatement === "" ? null : purposeStatement,
      affiliation: sanitizeAffiliation(affiliation),
    };
  });
}

export const allStudentOrgsOptions: csv2TSOptions =
  // biome-ignore format: added alignment for clarity.
  {
    inFilePath      : "data/allStudentOrgs062824.csv",
    inFileCSVHeaders: ["name", "purposeStatement", "affiliation"],
    inFileSchema    : rawStudentOrg,
    middleFunction  : sanitizeStudentOrgs,
    outFilePath     : "src/autoGenerated/allStudentOrgs.ts",
    outFileHeader   : DEFAULT_HEADER,
    outFileArrayName: "allStudentOrgs",
    outFileSchema   : studentOrg,
};

// Main function to convert allStudentOrgs csv to ts array.
export default async function genAllStudentOrgs(): Promise<void> {
  await csv2TS(allStudentOrgsOptions);
}
